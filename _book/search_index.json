[["index.html", "GO and KEGG analysis for MAPP paper Chapter 1 Prerequisites 1.1 Libraries 1.2 Options 1.3 Universe set of genes 1.4 Render the book 1.5 Session info", " GO and KEGG analysis for MAPP paper Ian U. Kouzel 2024-03-19 Chapter 1 Prerequisites 1.1 Libraries library(tidyverse) library(clusterProfiler) library(pathview) library(enrichplot) library(org.Hs.eg.db) library(readr) library(DT) library(matrixTests) 1.2 Options # These options are used for GO analysis in the downstream scripts / # R markdown pages: # minimal size of genes annotated by ontology term for testing minGSSize &lt;- 10 # human DB organismDB &lt;- &quot;org.Hs.eg.db&quot; # p-value cutoff pvalueCutoff &lt;- 0.1 # number of GOs to plot showCategory &lt;- 10 # p-adjusted cut off for cassette exons that are different between # control and cancer conditions genes_padj_cutoff &lt;- 0.1 1.3 Universe set of genes all genes having quantified cassette exons 1.3.1 GO (ENSEMBL) # read table with cassette exons and select the genes universe &lt;- read.table(&quot;data/cassette_exons_universe_table.tsv&quot;, header = T) %&gt;% dplyr::select(gene_id) %&gt;% unlist() # select unique IDs universe &lt;- unique(unlist(strsplit(universe, &quot;,&quot;))) # preview first 10 entrees head(universe, 10) ## [1] &quot;ENSG00000174371&quot; &quot;ENSG00000117009&quot; &quot;ENSG00000284770&quot; &quot;ENSG00000285053&quot; &quot;ENSG00000143774&quot; &quot;ENSG00000143801&quot; &quot;ENSG00000143353&quot; &quot;ENSG00000117691&quot; &quot;ENSG00000117625&quot; &quot;ENSG00000143469&quot; # length of a vector with ENSEMBL IDs length(universe) ## [1] 10273 1.3.2 KEGG (ENTREZ) # convert ENSEMBL IDs into ENTREZ format (required for KEGG analysis) ENTREZ_universe &lt;- bitr(universe, fromType = &quot;ENSEMBL&quot;, toType = &quot;ENTREZID&quot;, OrgDb= organismDB) %&gt;% dplyr::select(ENTREZID) %&gt;% unlist() ## &#39;select()&#39; returned 1:many mapping between keys and columns # select unique IDs ENTREZ_universe &lt;- unique(unlist(strsplit(ENTREZ_universe, &quot;,&quot;))) # preview first 10 entrees head(ENTREZ_universe) ## [1] &quot;9156&quot; &quot;8564&quot; &quot;6905&quot; &quot;2987&quot; &quot;5664&quot; &quot;127018&quot; # length of a vector with ENSEMBL IDs length(ENTREZ_universe) ## [1] 10220 1.4 Render the book # the full book is rendered with this command bookdown::render_book(&quot;index.Rmd&quot;, &quot;bookdown::gitbook&quot;) 1.5 Session info sessionInfo() ## R version 4.2.2 (2022-10-31) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Monterey 12.0.1 ## ## Matrix products: default ## LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats4 stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] matrixTests_0.2.3 DT_0.30 org.Hs.eg.db_3.15.0 AnnotationDbi_1.58.0 IRanges_2.30.1 S4Vectors_0.34.0 Biobase_2.56.0 BiocGenerics_0.42.0 ## [9] enrichplot_1.16.2 pathview_1.36.1 clusterProfiler_4.4.4 lubridate_1.9.3 forcats_1.0.0 stringr_1.5.1 dplyr_1.1.4 purrr_1.0.2 ## [17] readr_2.1.4 tidyr_1.3.1 tibble_3.2.1 ggplot2_3.4.4 tidyverse_2.0.0 ## ## loaded via a namespace (and not attached): ## [1] fgsea_1.22.0 colorspace_2.1-0 ggtree_3.4.4 ellipsis_0.3.2 qvalue_2.28.0 XVector_0.36.0 fs_1.6.3 ## [8] aplot_0.2.2 rstudioapi_0.15.0 farver_2.1.1 graphlayouts_1.0.2 ggrepel_0.9.4 bit64_4.0.5 scatterpie_0.2.1 ## [15] fansi_1.0.6 codetools_0.2-19 splines_4.2.2 cachem_1.0.8 GOSemSim_2.22.0 knitr_1.45 polyclip_1.10-6 ## [22] jsonlite_1.8.8 GO.db_3.15.0 png_0.1-8 graph_1.74.0 ggforce_0.4.1 compiler_4.2.2 httr_1.4.7 ## [29] Matrix_1.5-1 fastmap_1.1.1 lazyeval_0.2.2 cli_3.6.2 tweenr_2.0.2 htmltools_0.5.7 tools_4.2.2 ## [36] igraph_1.5.1 gtable_0.3.4 glue_1.7.0 GenomeInfoDbData_1.2.8 reshape2_1.4.4 DO.db_2.9 fastmatch_1.1-4 ## [43] Rcpp_1.0.12 jquerylib_0.1.4 vctrs_0.6.5 Biostrings_2.64.1 ape_5.7-1 nlme_3.1-163 crosstalk_1.2.0 ## [50] ggraph_2.1.0 xfun_0.41 timechange_0.2.0 lifecycle_1.0.4 XML_3.99-0.10 DOSE_3.22.1 zlibbioc_1.42.0 ## [57] MASS_7.3-60 scales_1.3.0 tidygraph_1.2.3 hms_1.1.3 KEGGgraph_1.56.0 parallel_4.2.2 RColorBrewer_1.1-3 ## [64] yaml_2.3.8 memoise_2.0.1 gridExtra_2.3 downloader_0.4 ggfun_0.1.3 sass_0.4.7 yulab.utils_0.1.0 ## [71] stringi_1.8.3 RSQLite_2.3.3 highr_0.10 tidytree_0.4.5 BiocParallel_1.30.4 GenomeInfoDb_1.32.4 matrixStats_1.1.0 ## [78] rlang_1.1.3 pkgconfig_2.0.3 bitops_1.0-7 evaluate_0.23 lattice_0.22-5 labeling_0.4.3 htmlwidgets_1.6.2 ## [85] treeio_1.20.2 patchwork_1.1.3 shadowtext_0.1.2 bit_4.0.5 tidyselect_1.2.0 plyr_1.8.9 magrittr_2.0.3 ## [92] bookdown_0.36 R6_2.5.1 generics_0.1.3 DBI_1.2.1 pillar_1.9.0 withr_3.0.0 KEGGREST_1.36.3 ## [99] RCurl_1.98-1.8 crayon_1.5.2 utf8_1.2.4 tzdb_0.4.0 rmarkdown_2.25 viridis_0.6.4 grid_4.2.2 ## [106] data.table_1.15.0 Rgraphviz_2.40.0 blob_1.2.4 digest_0.6.33 gridGraphics_0.5-1 munsell_0.5.0 viridisLite_0.4.2 ## [113] ggplotify_0.1.2 bslib_0.6.1 "],["go-and-kegg-common-targets-06.html", "Chapter 2 GO and KEGG: common targets 06 2.1 Load the data 2.2 Gene ontology (GO) 2.3 KEGG", " Chapter 2 GO and KEGG: common targets 06 2.1 Load the data # load table with common targets (binding probability &gt; 0.6) data_MAPP &lt;- read.table(&quot;data/inclusion_tables/0.6/common_targets.tsv&quot;, header = T) # select control and cancer columns CTRL &lt;- data_MAPP %&gt;% dplyr::select_if(., grepl(&quot;^CONTROL_&quot;, names(.))) CANCER &lt;- data_MAPP %&gt;% dplyr::select_if(., grepl(&quot;^CANCER_&quot;, names(.))) # use row_t_welch instead of usual t.test function since t.test produces # errors in some cases: t.test error: data are essentially constant # NAs are assigned for problematic cases # https://stats.stackexchange.com/questions/499634/t-test-error-data-are-essentially-constant/499637 # library matrixTests data_MAPP &lt;- data_MAPP %&gt;% mutate(padj = p.adjust(row_t_welch(CTRL, CANCER)$pvalue, method = &quot;BH&quot;, n=nrow(data_MAPP))) ## Warning: There was 1 warning in `mutate()`. ## â„¹ In argument: `padj = p.adjust(row_t_welch(CTRL, CANCER)$pvalue, method = &quot;BH&quot;, n = nrow(data_MAPP))`. ## Caused by warning: ## ! row_t_welch: 57 of the rows had essentially constant values. ## First occurrence at row 34 # view table interactively DT::datatable(data_MAPP, options = list(scrollX = TRUE)) 2.2 Gene ontology (GO) 2.2.1 Prepare the gene list # select genes from data_MAPP table based on padj values # threshold is set in index.Rmd: genes_padj_cutoff genes &lt;- na.omit(data_MAPP) %&gt;% arrange(desc(ABSDIFF)) %&gt;% filter(padj &lt; genes_padj_cutoff) %&gt;% dplyr::select(gene_id) %&gt;% unlist() genes &lt;- unlist(strsplit(genes, &quot;,&quot;)) # preview the gene names head(genes) ## gene_id1 gene_id2 gene_id3 gene_id4 gene_id5 gene_id6 ## &quot;ENSG00000136699&quot; &quot;ENSG00000136153&quot; &quot;ENSG00000007047&quot; &quot;ENSG00000070961&quot; &quot;ENSG00000137726&quot; &quot;ENSG00000146147&quot; 2.2.2 Biological process (BP) # select type of GO analysis type_of_GO = &quot;BP&quot; # create an object with a name based on the type of analysis assign(paste0(&quot;GO_&quot;, type_of_GO), enrichGO( genes, organismDB, keyType = &quot;ENSEMBL&quot;, ont = type_of_GO, pvalueCutoff = pvalueCutoff, minGSSize = minGSSize, pAdjustMethod = &quot;BH&quot;, universe = universe, readable = TRUE)) # assign the object created above to &quot;df_GO&quot; object df_GO &lt;- eval(parse(text = paste0(&quot;GO_&quot;, type_of_GO))) # if there are enriched terms in &quot;df_GO&quot; object, create a table with the results # filtered by specified p-adjusted threshold, if no enriched terms were found # print &quot;no GOs were found&quot; if(nrow(df_GO) &gt; 0){ DT::datatable(df_GO@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE)) } else &quot;no GOs were found&quot; # if there are enriched terms in &quot;df_GO&quot; object, create a barplot with # specified number of GOs to plot, if no enriched terms were found # print &quot;no GOs to plot&quot; if(nrow(df_GO) &gt; 0){ barplot(df_GO, showCategory = showCategory, title = type_of_GO) } else &quot;no GOs to plot&quot; 2.2.3 Molecular function (MF) # select type of GO analysis type_of_GO = &quot;MF&quot; # create an object with a name based on the type of analysis assign(paste0(&quot;GO_&quot;, type_of_GO), enrichGO( genes, organismDB, keyType = &quot;ENSEMBL&quot;, ont = type_of_GO, pvalueCutoff = pvalueCutoff, minGSSize = minGSSize, pAdjustMethod = &quot;BH&quot;, universe = universe, readable = TRUE)) # assign the object created above to &quot;df_GO&quot; object df_GO &lt;- eval(parse(text = paste0(&quot;GO_&quot;, type_of_GO))) # if there are enriched terms in &quot;df_GO&quot; object, create a table with the results # filtered by specified p-adjusted threshold, if no enriched terms were found # print &quot;no GOs were found&quot; if(nrow(df_GO) &gt; 0){ DT::datatable(df_GO@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE)) } else &quot;no GOs were found&quot; # if there are enriched terms in &quot;df_GO&quot; object, create a barplot with # specified number of GOs to plot, if no enriched terms were found # print &quot;no GOs to plot&quot; if(nrow(df_GO) &gt; 0){ barplot(df_GO, showCategory = showCategory, title = type_of_GO) } else &quot;no GOs to plot&quot; 2.2.4 Cellular component (CC) # select type of GO analysis type_of_GO = &quot;CC&quot; # create an object with a name based on the type of analysis assign(paste0(&quot;GO_&quot;, type_of_GO), enrichGO( genes, organismDB, keyType = &quot;ENSEMBL&quot;, ont = type_of_GO, pvalueCutoff = pvalueCutoff, minGSSize = minGSSize, pAdjustMethod = &quot;BH&quot;, universe = universe, readable = TRUE)) # assign the object created above to &quot;df_GO&quot; object df_GO &lt;- eval(parse(text = paste0(&quot;GO_&quot;, type_of_GO))) # if there are enriched terms in &quot;df_GO&quot; object, create a table with the results # filtered by specified p-adjusted threshold, if no enriched terms were found # print &quot;no GOs were found&quot; if(nrow(df_GO) &gt; 0){ DT::datatable(df_GO@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE)) } else &quot;no GOs were found&quot; # if there are enriched terms in &quot;df_GO&quot; object, create a barplot with # specified number of GOs to plot, if no enriched terms were found # print &quot;no GOs to plot&quot; if(nrow(df_GO) &gt; 0){ barplot(df_GO, showCategory = showCategory, title = type_of_GO) } else &quot;no GOs to plot&quot; 2.3 KEGG 2.3.1 Prepare the the data # select gene_id in ENSEMBL format and DIFF from the result table DIFF &lt;- data_MAPP %&gt;% dplyr::select(gene_id, DIFF) # rename the gene_id column names(DIFF)[1] &lt;- &quot;ENSEMBL&quot; # preview the head of the table head(DIFF) # create new df by converting ENSEMBL ID into ENTREZID and adding DIFF column # arrange table in descending order by abs(DIFF) genes_ENTREZ_df &lt;- bitr(na.omit(data_MAPP$gene_id[data_MAPP$padj &lt; genes_padj_cutoff]), fromType = &quot;ENSEMBL&quot;, toType = &quot;ENTREZID&quot;, OrgDb= organismDB) %&gt;% left_join(DIFF, by = &quot;ENSEMBL&quot;) %&gt;% arrange(desc(abs(DIFF))) ## &#39;select()&#39; returned 1:many mapping between keys and columns # preview obtained table head(genes_ENTREZ_df ) # create a vector with DIFF values genes_DIFF &lt;- genes_ENTREZ_df$DIFF genes_DIFF ## [1] -0.8979957360 -0.8584353547 -0.8257323117 -0.7876479961 -0.7707704024 -0.7313491711 -0.7283427350 -0.7255878978 -0.6812689861 -0.6761845435 -0.6457757451 0.6131462418 ## [13] -0.6126834170 -0.6059904981 -0.5835027874 0.5826520665 -0.5779614938 -0.5731150152 -0.5039827010 0.4997984468 -0.4949639671 -0.4780925852 -0.4673897228 0.4601035870 ## [25] -0.4476402302 -0.4461977900 -0.4435530520 -0.4326941390 -0.4292709048 -0.4214836971 0.4212018927 -0.4207321022 -0.4128495278 -0.4079200779 -0.3993679992 -0.3990899594 ## [37] -0.3940557482 -0.3936374396 -0.3917491879 -0.3759729828 -0.3746133848 -0.3740641877 -0.3624652536 -0.3590452996 -0.3346734528 0.3303761298 -0.3246021231 -0.3218975259 ## [49] -0.3177806050 -0.3166976440 -0.3164674623 -0.3064956280 0.3054761572 -0.2993130088 -0.2982095154 -0.2961029474 0.2911460988 0.2866329682 0.2828069050 -0.2802366615 ## [61] -0.2796783989 -0.2773482221 -0.2752379288 -0.2714972937 -0.2694050827 -0.2623990233 -0.2614033917 -0.2541493969 -0.2405546435 0.2346973949 -0.2330956201 -0.2330442045 ## [73] -0.2235605792 -0.2199805472 -0.2189998265 -0.2183150011 0.2181638192 -0.2177805915 -0.2161346331 0.2159104888 -0.2149441538 -0.2137478381 -0.2082725497 -0.2082416337 ## [85] -0.2070688578 0.2068000831 -0.2064822542 0.2021587608 -0.1966051421 0.1945417443 0.1931904684 -0.1783068393 0.1765509237 -0.1751534582 -0.1732551019 -0.1718531956 ## [97] -0.1709080057 -0.1705078778 -0.1689292006 -0.1648515758 -0.1635630605 -0.1635210081 -0.1610984290 -0.1532299449 -0.1528324557 0.1528307243 -0.1461161131 -0.1443977455 ## [109] -0.1428702047 0.1424137390 -0.1394626681 -0.1369444408 -0.1308699437 -0.1251072462 -0.1165410320 -0.1157577022 -0.1140257975 -0.1098105746 -0.1085861913 -0.1084035989 ## [121] -0.1071484814 -0.1053005124 0.1020073403 -0.1011045089 -0.1008724841 -0.0996860714 0.0989993343 0.0930629753 -0.0921203587 -0.0859871735 -0.0851788674 0.0847634790 ## [133] -0.0819791847 -0.0795743916 -0.0784768772 -0.0729334772 -0.0694070759 0.0662037416 -0.0654547864 -0.0634562256 -0.0625232801 -0.0613524086 -0.0602049942 0.0569950343 ## [145] -0.0566128969 -0.0544200094 -0.0512795212 -0.0486206120 -0.0482100654 -0.0455517666 -0.0455517666 -0.0455434529 -0.0446491788 0.0422874365 0.0408642398 -0.0393809472 ## [157] 0.0391562069 -0.0388612277 0.0372750994 -0.0363436702 -0.0345159444 -0.0335540588 -0.0332844259 -0.0316590939 -0.0297987331 -0.0268358961 0.0241351292 -0.0226489685 ## [169] -0.0208535623 -0.0188973975 0.0158897525 -0.0155968569 -0.0150684310 -0.0147565153 -0.0097996006 0.0085076823 -0.0078767310 -0.0065933510 -0.0042393945 -0.0041564412 ## [181] 0.0039131408 -0.0034842387 -0.0034348407 -0.0015689498 -0.0013973071 0.0010281511 0.0006295817 -0.0004179173 0.0003624584 0.0000000000 0.0000000000 0.0000000000 # add names based on ENTREZID names(genes_DIFF) &lt;- genes_ENTREZ_df$ENTREZID # preview genes in ENTREZ format with corresponding fold changes head(genes_DIFF) ## 55627 4008 57787 490 53826 90523 ## -0.8979957 -0.8584354 -0.8257323 -0.7876480 -0.7707704 -0.7313492 2.3.2 run enrichKEGG # run enrichKEGG using options specified in &quot;index.Rmd&quot; file KEGGresults &lt;- enrichKEGG( names(genes_DIFF), organism = &quot;hsa&quot;, keyType = &quot;ncbi-geneid&quot;, pvalueCutoff = pvalueCutoff, pAdjustMethod = &quot;BH&quot;, universe = as.character(na.omit(ENTREZ_universe)), use_internal_data = FALSE ) ## --&gt; No gene can be mapped.... ## --&gt; Expected input gene ID: ## --&gt; return NULL... # if there are enriched KEGG pathways found in &quot;KEGGresults&quot; object, # create a table with the results filtered by specified p-adjusted threshold, # if no enriched terms were found, print &quot;no KEGG pathways were found&quot; if (!is.null(KEGGresults)) { if(nrow(KEGGresults@result %&gt;% filter(p.adjust &lt; pvalueCutoff)) &gt; 0){ DT::datatable(KEGGresults@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE)) } } else &quot;no KEGG pathways were found&quot; ## [1] &quot;no KEGG pathways were found&quot; "],["go-and-kegg-common-targets-09.html", "Chapter 3 GO and KEGG: common targets 09 3.1 Load the data 3.2 Gene ontology (GO) 3.3 KEGG", " Chapter 3 GO and KEGG: common targets 09 3.1 Load the data # load table with common targets (binding probability &gt; 0.9) data_MAPP &lt;- read.table(&quot;data/inclusion_tables/0.9/common_targets.tsv&quot;, header = T) # select control and cancer columns CTRL &lt;- data_MAPP %&gt;% dplyr::select_if(., grepl(&quot;^CONTROL_&quot;, names(.))) CANCER &lt;- data_MAPP %&gt;% dplyr::select_if(., grepl(&quot;^CANCER_&quot;, names(.))) # use row_t_welch instead of usual t.test function since t.test produces # errors in some cases: t.test error: data are essentially constant # NAs are assigned for problematic cases # https://stats.stackexchange.com/questions/499634/t-test-error-data-are-essentially-constant/499637 # library matrixTests data_MAPP &lt;- data_MAPP %&gt;% mutate(padj = p.adjust(row_t_welch(CTRL, CANCER)$pvalue, method = &quot;BH&quot;, n=nrow(data_MAPP))) ## Warning: There was 1 warning in `mutate()`. ## â„¹ In argument: `padj = p.adjust(row_t_welch(CTRL, CANCER)$pvalue, method = &quot;BH&quot;, n = nrow(data_MAPP))`. ## Caused by warning: ## ! row_t_welch: 26 of the rows had essentially constant values. ## First occurrence at row 19 # view table interactively DT::datatable(data_MAPP, options = list(scrollX = TRUE)) 3.2 Gene ontology (GO) 3.2.1 Prepare the gene list # select genes from data_MAPP table based on padj values # threshold is set in index.Rmd: genes_padj_cutoff genes &lt;- na.omit(data_MAPP) %&gt;% arrange(desc(ABSDIFF)) %&gt;% filter(padj &lt; genes_padj_cutoff) %&gt;% dplyr::select(gene_id) %&gt;% unlist() genes &lt;- unlist(strsplit(genes, &quot;,&quot;)) # preview the gene names head(genes) ## gene_id1 gene_id2 gene_id3 gene_id4 gene_id5 gene_id6 ## &quot;ENSG00000136153&quot; &quot;ENSG00000007047&quot; &quot;ENSG00000070961&quot; &quot;ENSG00000137726&quot; &quot;ENSG00000146147&quot; &quot;ENSG00000067191&quot; 3.2.2 Biological process (BP) # select type of GO analysis type_of_GO = &quot;BP&quot; # create an object with a name based on the type of analysis assign(paste0(&quot;GO_&quot;, type_of_GO), enrichGO( genes, organismDB, keyType = &quot;ENSEMBL&quot;, ont = type_of_GO, pvalueCutoff = pvalueCutoff, minGSSize = minGSSize, pAdjustMethod = &quot;BH&quot;, universe = universe, readable = TRUE)) # assign the object created above to &quot;df_GO&quot; object df_GO &lt;- eval(parse(text = paste0(&quot;GO_&quot;, type_of_GO))) # if there are enriched terms in &quot;df_GO&quot; object, create a table with the results # filtered by specified p-adjusted threshold, if no enriched terms were found # print &quot;no GOs were found&quot; if(nrow(df_GO) &gt; 0){ DT::datatable(df_GO@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE)) } else &quot;no GOs were found&quot; # if there are enriched terms in &quot;df_GO&quot; object, create a barplot with # specified number of GOs to plot, if no enriched terms were found # print &quot;no GOs to plot&quot; if(nrow(df_GO) &gt; 0){ barplot(df_GO, showCategory = showCategory, title = type_of_GO) } else &quot;no GOs to plot&quot; 3.2.3 Molecular function (MF) # select type of GO analysis type_of_GO = &quot;MF&quot; # create an object with a name based on the type of analysis assign(paste0(&quot;GO_&quot;, type_of_GO), enrichGO( genes, organismDB, keyType = &quot;ENSEMBL&quot;, ont = type_of_GO, pvalueCutoff = pvalueCutoff, minGSSize = minGSSize, pAdjustMethod = &quot;BH&quot;, universe = universe, readable = TRUE)) # assign the object created above to &quot;df_GO&quot; object df_GO &lt;- eval(parse(text = paste0(&quot;GO_&quot;, type_of_GO))) # if there are enriched terms in &quot;df_GO&quot; object, create a table with the results # filtered by specified p-adjusted threshold, if no enriched terms were found # print &quot;no GOs were found&quot; if(nrow(df_GO) &gt; 0){ DT::datatable(df_GO@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE)) } else &quot;no GOs were found&quot; # if there are enriched terms in &quot;df_GO&quot; object, create a barplot with # specified number of GOs to plot, if no enriched terms were found # print &quot;no GOs to plot&quot; if(nrow(df_GO) &gt; 0){ barplot(df_GO, showCategory = showCategory, title = type_of_GO) } else &quot;no GOs to plot&quot; 3.2.4 Cellular component (CC) # select type of GO analysis type_of_GO = &quot;CC&quot; # create an object with a name based on the type of analysis assign(paste0(&quot;GO_&quot;, type_of_GO), enrichGO( genes, organismDB, keyType = &quot;ENSEMBL&quot;, ont = type_of_GO, pvalueCutoff = pvalueCutoff, minGSSize = minGSSize, pAdjustMethod = &quot;BH&quot;, universe = universe, readable = TRUE)) # assign the object created above to &quot;df_GO&quot; object df_GO &lt;- eval(parse(text = paste0(&quot;GO_&quot;, type_of_GO))) # if there are enriched terms in &quot;df_GO&quot; object, create a table with the results # filtered by specified p-adjusted threshold, if no enriched terms were found # print &quot;no GOs were found&quot; if(nrow(df_GO) &gt; 0){ DT::datatable(df_GO@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE)) } else &quot;no GOs were found&quot; # if there are enriched terms in &quot;df_GO&quot; object, create a barplot with # specified number of GOs to plot, if no enriched terms were found # print &quot;no GOs to plot&quot; if(nrow(df_GO) &gt; 0){ barplot(df_GO, showCategory = showCategory, title = type_of_GO) } else &quot;no GOs to plot&quot; 3.3 KEGG 3.3.1 Prepare the the data # select gene_id in ENSEMBL format and DIFF from the result table DIFF &lt;- data_MAPP %&gt;% dplyr::select(gene_id, DIFF) # rename the gene_id column names(DIFF)[1] &lt;- &quot;ENSEMBL&quot; # preview the head of the table head(DIFF) # create new df by converting ENSEMBL ID into ENTREZID and adding DIFF column # arrange table in descending order by abs(DIFF) genes_ENTREZ_df &lt;- bitr(na.omit(data_MAPP$gene_id[data_MAPP$padj &lt; genes_padj_cutoff]), fromType = &quot;ENSEMBL&quot;, toType = &quot;ENTREZID&quot;, OrgDb= organismDB) %&gt;% left_join(DIFF, by = &quot;ENSEMBL&quot;) %&gt;% arrange(desc(abs(DIFF))) ## &#39;select()&#39; returned 1:1 mapping between keys and columns # preview obtained table head(genes_ENTREZ_df ) # create a vector with DIFF values genes_DIFF &lt;- genes_ENTREZ_df$DIFF genes_DIFF ## [1] -0.8584353547 -0.8257323117 -0.7876479961 -0.7707704024 -0.7313491711 -0.7283427350 -0.6761845435 -0.6457757451 -0.6126834170 -0.5779614938 -0.5039827010 -0.4780925852 ## [13] -0.4673897228 -0.4435530520 -0.4292709048 -0.4214836971 -0.4207321022 -0.4128495278 -0.4079200779 -0.3993679992 -0.3936374396 -0.3917491879 -0.3759729828 -0.3624652536 ## [25] -0.3590452996 0.3303761298 -0.3246021231 -0.3218975259 0.3054761572 -0.2982095154 -0.2961029474 0.2911460988 -0.2802366615 -0.2796783989 -0.2773482221 -0.2752379288 ## [37] -0.2714972937 -0.2694050827 -0.2623990233 -0.2541493969 -0.2405546435 -0.2189998265 0.2181638192 -0.2177805915 -0.2082725497 -0.2070688578 -0.2064822542 0.2021587608 ## [49] -0.1970245440 -0.1966051421 -0.1783068393 0.1765509237 -0.1732551019 -0.1648515758 -0.1635630605 -0.1635210081 -0.1532299449 -0.1528324557 0.1528307243 -0.1443977455 ## [61] -0.1394626681 -0.1369444408 -0.1308699437 -0.1251072462 -0.1157577022 -0.1140257975 -0.1085861913 -0.1084035989 -0.1071484814 -0.1011045089 0.0930629753 -0.0921203587 ## [73] -0.0851788674 -0.0654547864 -0.0634562256 -0.0613524086 -0.0602049942 -0.0601736573 -0.0514930233 -0.0512795212 -0.0494205822 -0.0486206120 -0.0482100654 -0.0393809472 ## [85] 0.0391562069 -0.0388612277 -0.0335540588 -0.0332844259 -0.0324909965 -0.0316590939 -0.0208535623 -0.0155968569 0.0085076823 -0.0078767310 -0.0051469196 0.0010281511 ## [97] 0.0006295817 0.0003624584 # add names based on ENTREZID names(genes_DIFF) &lt;- genes_ENTREZ_df$ENTREZID # preview genes in ENTREZ format with corresponding fold changes head(genes_DIFF) ## 4008 57787 490 53826 90523 782 ## -0.8584354 -0.8257323 -0.7876480 -0.7707704 -0.7313492 -0.7283427 3.3.2 run enrichKEGG # run enrichKEGG using options specified in &quot;index.Rmd&quot; file KEGGresults &lt;- enrichKEGG( names(genes_DIFF), organism = &quot;hsa&quot;, keyType = &quot;ncbi-geneid&quot;, pvalueCutoff = pvalueCutoff, pAdjustMethod = &quot;BH&quot;, universe = as.character(na.omit(ENTREZ_universe)), use_internal_data = FALSE ) ## --&gt; No gene can be mapped.... ## --&gt; Expected input gene ID: ## --&gt; return NULL... # if there are enriched KEGG pathways found in &quot;KEGGresults&quot; object, # create a table with the results filtered by specified p-adjusted threshold, # if no enriched terms were found, print &quot;no KEGG pathways were found&quot; if (!is.null(KEGGresults)) { if(nrow(KEGGresults@result %&gt;% filter(p.adjust &lt; pvalueCutoff)) &gt; 0){ DT::datatable(KEGGresults@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE))} } else &quot;no KEGG pathways were found&quot; ## [1] &quot;no KEGG pathways were found&quot; "],["go-and-kegg-ptbp1-targets-06.html", "Chapter 4 GO and KEGG: PTBP1 targets 06 4.1 Load the data 4.2 Gene ontology (GO) 4.3 KEGG", " Chapter 4 GO and KEGG: PTBP1 targets 06 4.1 Load the data # load table with targets (binding probability &gt; 0.6) data_MAPP &lt;- read.table(&quot;data/inclusion_tables/0.6/ptbp1_exclusive_targets.tsv&quot;, header = T) # select control and cancer columns CTRL &lt;- data_MAPP %&gt;% dplyr::select_if(., grepl(&quot;^CONTROL_&quot;, names(.))) CANCER &lt;- data_MAPP %&gt;% dplyr::select_if(., grepl(&quot;^CANCER_&quot;, names(.))) # use row_t_welch instead of usual t.test function since t.test produces # errors in some cases: t.test error: data are essentially constant # NAs are assigned for problematic cases # https://stats.stackexchange.com/questions/499634/t-test-error-data-are-essentially-constant/499637 # library matrixTests data_MAPP &lt;- data_MAPP %&gt;% mutate(padj = p.adjust(row_t_welch(CTRL, CANCER)$pvalue, method = &quot;BH&quot;, n=nrow(data_MAPP))) ## Warning: There was 1 warning in `mutate()`. ## â„¹ In argument: `padj = p.adjust(row_t_welch(CTRL, CANCER)$pvalue, method = &quot;BH&quot;, n = nrow(data_MAPP))`. ## Caused by warning: ## ! row_t_welch: 188 of the rows had essentially constant values. ## First occurrence at row 42 # view table interactively DT::datatable(data_MAPP, options = list(scrollX = TRUE)) 4.2 Gene ontology (GO) 4.2.1 Prepare the gene list # select genes from data_MAPP table based on padj values # threshold is set in index.Rmd: genes_padj_cutoff genes &lt;- na.omit(data_MAPP) %&gt;% arrange(desc(ABSDIFF)) %&gt;% filter(padj &lt; genes_padj_cutoff) %&gt;% dplyr::select(gene_id) %&gt;% unlist() genes &lt;- unlist(strsplit(genes, &quot;,&quot;)) # preview the gene names head(genes) ## gene_id1 gene_id2 gene_id3 gene_id4 gene_id5 gene_id6 ## &quot;ENSG00000066230&quot; &quot;ENSG00000108018&quot; &quot;ENSG00000198910&quot; &quot;ENSG00000175182&quot; &quot;ENSG00000138443&quot; &quot;ENSG00000160410&quot; 4.2.2 Biological process (BP) # select type of GO analysis type_of_GO = &quot;BP&quot; # create an object with a name based on the type of analysis assign(paste0(&quot;GO_&quot;, type_of_GO), enrichGO( genes, organismDB, keyType = &quot;ENSEMBL&quot;, ont = type_of_GO, pvalueCutoff = pvalueCutoff, minGSSize = minGSSize, pAdjustMethod = &quot;BH&quot;, universe = universe, readable = TRUE)) # assign the object created above to &quot;df_GO&quot; object df_GO &lt;- eval(parse(text = paste0(&quot;GO_&quot;, type_of_GO))) # if there are enriched terms in &quot;df_GO&quot; object, create a table with the results # filtered by specified p-adjusted threshold, if no enriched terms were found # print &quot;no GOs were found&quot; if(nrow(df_GO) &gt; 0){ DT::datatable(df_GO@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE)) } else &quot;no GOs were found&quot; # if there are enriched terms in &quot;df_GO&quot; object, create a barplot with # specified number of GOs to plot, if no enriched terms were found # print &quot;no GOs to plot&quot; if(nrow(df_GO) &gt; 0){ barplot(df_GO, showCategory = showCategory, title = type_of_GO) } else &quot;no GOs to plot&quot; 4.2.3 Molecular function (MF) # select type of GO analysis type_of_GO = &quot;MF&quot; # create an object with a name based on the type of analysis assign(paste0(&quot;GO_&quot;, type_of_GO), enrichGO( genes, organismDB, keyType = &quot;ENSEMBL&quot;, ont = type_of_GO, pvalueCutoff = pvalueCutoff, minGSSize = minGSSize, pAdjustMethod = &quot;BH&quot;, universe = universe, readable = TRUE)) # assign the object created above to &quot;df_GO&quot; object df_GO &lt;- eval(parse(text = paste0(&quot;GO_&quot;, type_of_GO))) # if there are enriched terms in &quot;df_GO&quot; object, create a table with the results # filtered by specified p-adjusted threshold, if no enriched terms were found # print &quot;no GOs were found&quot; if(nrow(df_GO) &gt; 0){ DT::datatable(df_GO@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE)) } else &quot;no GOs were found&quot; # if there are enriched terms in &quot;df_GO&quot; object, create a barplot with # specified number of GOs to plot, if no enriched terms were found # print &quot;no GOs to plot&quot; if(nrow(df_GO) &gt; 0){ barplot(df_GO, showCategory = showCategory, title = type_of_GO) } else &quot;no GOs to plot&quot; 4.2.4 Cellular component (CC) # select type of GO analysis type_of_GO = &quot;CC&quot; # create an object with a name based on the type of analysis assign(paste0(&quot;GO_&quot;, type_of_GO), enrichGO( genes, organismDB, keyType = &quot;ENSEMBL&quot;, ont = type_of_GO, pvalueCutoff = pvalueCutoff, minGSSize = minGSSize, pAdjustMethod = &quot;BH&quot;, universe = universe, readable = TRUE)) # assign the object created above to &quot;df_GO&quot; object df_GO &lt;- eval(parse(text = paste0(&quot;GO_&quot;, type_of_GO))) # if there are enriched terms in &quot;df_GO&quot; object, create a table with the results # filtered by specified p-adjusted threshold, if no enriched terms were found # print &quot;no GOs were found&quot; if(nrow(df_GO) &gt; 0){ DT::datatable(df_GO@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE)) } else &quot;no GOs were found&quot; # if there are enriched terms in &quot;df_GO&quot; object, create a barplot with # specified number of GOs to plot, if no enriched terms were found # print &quot;no GOs to plot&quot; if(nrow(df_GO) &gt; 0){ barplot(df_GO, showCategory = showCategory, title = type_of_GO) } else &quot;no GOs to plot&quot; 4.3 KEGG 4.3.1 Prepare the the data # select gene_id in ENSEMBL format and DIFF from the result table DIFF &lt;- data_MAPP %&gt;% dplyr::select(gene_id, DIFF) # rename the gene_id column names(DIFF)[1] &lt;- &quot;ENSEMBL&quot; # preview the head of the table head(DIFF) # create new df by converting ENSEMBL ID into ENTREZID and adding DIFF column # arrange table in descending order by abs(DIFF) genes_ENTREZ_df &lt;- bitr(na.omit(data_MAPP$gene_id[data_MAPP$padj &lt; genes_padj_cutoff]), fromType = &quot;ENSEMBL&quot;, toType = &quot;ENTREZID&quot;, OrgDb= organismDB) %&gt;% left_join(DIFF, by = &quot;ENSEMBL&quot;) %&gt;% arrange(desc(abs(DIFF))) ## &#39;select()&#39; returned 1:1 mapping between keys and columns # preview obtained table head(genes_ENTREZ_df ) # create a vector with DIFF values genes_DIFF &lt;- genes_ENTREZ_df$DIFF genes_DIFF ## [1] -0.7386234447 0.7234788392 -0.7038045357 -0.6767915011 -0.6472437587 0.6375013660 -0.6348159210 -0.6326628316 -0.6183222312 0.6174028876 -0.6140461704 -0.6090158816 ## [13] -0.6061716878 -0.6056684642 -0.5904575645 -0.5516013241 -0.5371580583 -0.5075359322 -0.5060305047 -0.4982807580 -0.4886914984 -0.4807004864 0.4793950287 -0.4597016162 ## [25] -0.4537595538 0.4432134641 -0.4269054383 -0.4170725114 -0.4125588465 -0.4023926271 0.4023150393 -0.4011637408 -0.4008816599 -0.4000936554 -0.3963373228 -0.3961706940 ## [37] 0.3895177036 -0.3846735935 -0.3801249848 -0.3787195015 0.3732326499 -0.3647345621 -0.3555227277 -0.3545908955 0.3524814618 -0.3484162073 -0.3418676330 -0.3350696756 ## [49] 0.3340303944 -0.3302687735 0.3230655549 -0.3128791385 -0.3127745804 -0.3123945288 -0.3117062229 -0.3011135743 0.2994288198 0.2938941789 -0.2934065741 -0.2851575359 ## [61] 0.2805972602 -0.2796040305 -0.2781290345 -0.2737303878 -0.2705194645 -0.2683871228 -0.2661378464 -0.2627351309 0.2564752438 -0.2521550892 0.2510039064 0.2499223522 ## [73] -0.2456948766 0.2433980030 0.2428143831 0.2408254676 -0.2389997061 -0.2387547898 -0.2352394178 0.2300828606 -0.2248009201 -0.2227803174 -0.2214999913 -0.2153954570 ## [85] -0.2137842988 -0.2134123229 -0.2027331300 -0.2023366651 -0.2008920065 -0.2007350915 0.1981858275 -0.1956600082 -0.1948367359 -0.1946907931 -0.1936560438 0.1918771838 ## [97] -0.1907448643 0.1904533776 -0.1876549753 0.1834421396 -0.1815393577 -0.1739656969 -0.1730988832 -0.1689056386 -0.1681718254 -0.1676786698 -0.1654800446 -0.1650522233 ## [109] -0.1605138528 0.1593921290 0.1584392564 -0.1582708466 0.1561459358 -0.1553110821 -0.1522085839 0.1511253529 0.1508286268 -0.1467825838 -0.1454036449 -0.1453129239 ## [121] 0.1431509296 -0.1422417519 -0.1405528325 -0.1390944514 -0.1345836652 0.1344607384 0.1337166473 0.1325263215 -0.1320972171 -0.1294719137 -0.1268212659 -0.1255175715 ## [133] -0.1234657988 -0.1234367491 0.1228017521 0.1224734400 -0.1191688457 -0.1183739153 0.1165388302 0.1163248259 -0.1150050172 -0.1133982194 0.1095649637 -0.1092203820 ## [145] -0.1090249174 0.1082236252 0.1081349218 -0.1078565684 0.1021686602 -0.1021405510 -0.1017850335 -0.1011212729 -0.1008642737 -0.1005088073 0.0986096766 -0.0977924474 ## [157] 0.0977829153 -0.0961249444 0.0955166707 0.0947785495 0.0929299031 -0.0884373350 -0.0863868276 -0.0850413793 -0.0844963771 -0.0824228653 -0.0812306197 0.0755034384 ## [169] -0.0730146511 -0.0715218434 0.0707841541 -0.0678886226 -0.0678431712 -0.0674346764 0.0664003400 0.0657727492 -0.0654781001 -0.0617468658 0.0604758951 -0.0577699885 ## [181] -0.0570988592 0.0559417152 0.0554792429 0.0516835513 0.0507903936 -0.0501563469 0.0496979471 0.0482635643 -0.0462337926 -0.0461497350 0.0460694157 -0.0446575937 ## [193] 0.0434196510 -0.0420112994 0.0414736525 0.0398431020 -0.0396318218 0.0377492084 0.0358978456 -0.0353065495 0.0340554154 0.0330860783 0.0320450478 0.0312025862 ## [205] -0.0308098800 -0.0301416728 0.0290543184 -0.0287559638 -0.0282860442 -0.0276688124 -0.0268656582 -0.0205277813 0.0199428484 -0.0189964783 -0.0170156134 0.0167677235 ## [217] 0.0163276144 -0.0148074982 0.0147491869 -0.0144495156 0.0121008836 -0.0119283709 -0.0111842777 -0.0108655726 -0.0100437933 -0.0091958320 -0.0080699362 -0.0078104107 ## [229] 0.0069227451 -0.0053478687 0.0052309106 0.0049479082 -0.0037573453 -0.0037217345 -0.0037147570 -0.0035988507 0.0034517318 0.0028603459 0.0019649759 -0.0019104518 ## [241] -0.0013964374 0.0012090716 -0.0006822893 0.0005137457 -0.0004821073 0.0004537414 -0.0001317598 # add names based on ENTREZID names(genes_DIFF) &lt;- genes_ENTREZ_df$ENTREZID # preview genes in ENTREZ format with corresponding fold changes head(genes_DIFF) ## 6550 114815 3897 131408 10152 92799 ## -0.7386234 0.7234788 -0.7038045 -0.6767915 -0.6472438 0.6375014 4.3.2 run enrichKEGG # run enrichKEGG using options specified in &quot;index.Rmd&quot; file KEGGresults &lt;- enrichKEGG( names(genes_DIFF), organism = &quot;hsa&quot;, keyType = &quot;ncbi-geneid&quot;, pvalueCutoff = pvalueCutoff, pAdjustMethod = &quot;BH&quot;, universe = as.character(na.omit(ENTREZ_universe)), use_internal_data = FALSE ) ## --&gt; No gene can be mapped.... ## --&gt; Expected input gene ID: ## --&gt; return NULL... # if there are enriched KEGG pathways found in &quot;KEGGresults&quot; object, # create a table with the results filtered by specified p-adjusted threshold, # if no enriched terms were found, print &quot;no KEGG pathways were found&quot; if (!is.null(KEGGresults)) { if(nrow(KEGGresults@result %&gt;% filter(p.adjust &lt; pvalueCutoff)) &gt; 0){ DT::datatable(KEGGresults@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE))} } else &quot;no KEGG pathways were found&quot; ## [1] &quot;no KEGG pathways were found&quot; "],["go-and-kegg-ptbp1-targets-09.html", "Chapter 5 GO and KEGG: PTBP1 targets 09 5.1 Load the data 5.2 Gene ontology (GO) 5.3 KEGG", " Chapter 5 GO and KEGG: PTBP1 targets 09 5.1 Load the data # load table with targets (binding probability &gt; 0.9) data_MAPP &lt;- read.table(&quot;data/inclusion_tables/0.9/ptbp1_exclusive_targets.tsv&quot;, header = T) # select control and cancer columns CTRL &lt;- data_MAPP %&gt;% dplyr::select_if(., grepl(&quot;^CONTROL_&quot;, names(.))) CANCER &lt;- data_MAPP %&gt;% dplyr::select_if(., grepl(&quot;^CANCER_&quot;, names(.))) # use row_t_welch instead of usual t.test function since t.test produces # errors in some cases: t.test error: data are essentially constant # NAs are assigned for problematic cases # https://stats.stackexchange.com/questions/499634/t-test-error-data-are-essentially-constant/499637 # library matrixTests data_MAPP &lt;- data_MAPP %&gt;% mutate(padj = p.adjust(row_t_welch(CTRL, CANCER)$pvalue, method = &quot;BH&quot;, n=nrow(data_MAPP))) ## Warning: There was 1 warning in `mutate()`. ## â„¹ In argument: `padj = p.adjust(row_t_welch(CTRL, CANCER)$pvalue, method = &quot;BH&quot;, n = nrow(data_MAPP))`. ## Caused by warning: ## ! row_t_welch: 72 of the rows had essentially constant values. ## First occurrence at row 20 # view table interactively DT::datatable(data_MAPP, options = list(scrollX = TRUE)) 5.2 Gene ontology (GO) 5.2.1 Prepare the gene list # select genes from data_MAPP table based on padj values # threshold is set in index.Rmd: genes_padj_cutoff genes &lt;- na.omit(data_MAPP) %&gt;% arrange(desc(ABSDIFF)) %&gt;% filter(padj &lt; genes_padj_cutoff) %&gt;% dplyr::select(gene_id) %&gt;% unlist() genes &lt;- unlist(strsplit(genes, &quot;,&quot;)) # preview the gene names head(genes) ## gene_id1 gene_id2 gene_id3 gene_id4 gene_id5 gene_id6 ## &quot;ENSG00000066230&quot; &quot;ENSG00000198910&quot; &quot;ENSG00000138443&quot; &quot;ENSG00000198910&quot; &quot;ENSG00000138162&quot; &quot;ENSG00000135905&quot; 5.2.2 Biological process (BP) # select type of GO analysis type_of_GO = &quot;BP&quot; # create an object with a name based on the type of analysis assign(paste0(&quot;GO_&quot;, type_of_GO), enrichGO( genes, organismDB, keyType = &quot;ENSEMBL&quot;, ont = type_of_GO, pvalueCutoff = pvalueCutoff, minGSSize = minGSSize, pAdjustMethod = &quot;BH&quot;, universe = universe, readable = TRUE)) # assign the object created above to &quot;df_GO&quot; object df_GO &lt;- eval(parse(text = paste0(&quot;GO_&quot;, type_of_GO))) # if there are enriched terms in &quot;df_GO&quot; object, create a table with the results # filtered by specified p-adjusted threshold, if no enriched terms were found # print &quot;no GOs were found&quot; if(nrow(df_GO) &gt; 0){ DT::datatable(df_GO@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE)) } else &quot;no GOs were found&quot; ## [1] &quot;no GOs were found&quot; # if there are enriched terms in &quot;df_GO&quot; object, create a barplot with # specified number of GOs to plot, if no enriched terms were found # print &quot;no GOs to plot&quot; if(nrow(df_GO) &gt; 0){ barplot(df_GO, showCategory = showCategory, title = type_of_GO) } else &quot;no GOs to plot&quot; ## [1] &quot;no GOs to plot&quot; 5.2.3 Molecular function (MF) # select type of GO analysis type_of_GO = &quot;MF&quot; # create an object with a name based on the type of analysis assign(paste0(&quot;GO_&quot;, type_of_GO), enrichGO( genes, organismDB, keyType = &quot;ENSEMBL&quot;, ont = type_of_GO, pvalueCutoff = pvalueCutoff, minGSSize = minGSSize, pAdjustMethod = &quot;BH&quot;, universe = universe, readable = TRUE)) # assign the object created above to &quot;df_GO&quot; object df_GO &lt;- eval(parse(text = paste0(&quot;GO_&quot;, type_of_GO))) # if there are enriched terms in &quot;df_GO&quot; object, create a table with the results # filtered by specified p-adjusted threshold, if no enriched terms were found # print &quot;no GOs were found&quot; if(nrow(df_GO) &gt; 0){ DT::datatable(df_GO@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE)) } else &quot;no GOs were found&quot; ## [1] &quot;no GOs were found&quot; # if there are enriched terms in &quot;df_GO&quot; object, create a barplot with # specified number of GOs to plot, if no enriched terms were found # print &quot;no GOs to plot&quot; if(nrow(df_GO) &gt; 0){ barplot(df_GO, showCategory = showCategory, title = type_of_GO) } else &quot;no GOs to plot&quot; ## [1] &quot;no GOs to plot&quot; 5.2.4 Cellular component (CC) # select type of GO analysis type_of_GO = &quot;CC&quot; # create an object with a name based on the type of analysis assign(paste0(&quot;GO_&quot;, type_of_GO), enrichGO( genes, organismDB, keyType = &quot;ENSEMBL&quot;, ont = type_of_GO, pvalueCutoff = pvalueCutoff, minGSSize = minGSSize, pAdjustMethod = &quot;BH&quot;, universe = universe, readable = TRUE)) # assign the object created above to &quot;df_GO&quot; object df_GO &lt;- eval(parse(text = paste0(&quot;GO_&quot;, type_of_GO))) # if there are enriched terms in &quot;df_GO&quot; object, create a table with the results # filtered by specified p-adjusted threshold, if no enriched terms were found # print &quot;no GOs were found&quot; if(nrow(df_GO) &gt; 0){ DT::datatable(df_GO@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE)) } else &quot;no GOs were found&quot; # if there are enriched terms in &quot;df_GO&quot; object, create a barplot with # specified number of GOs to plot, if no enriched terms were found # print &quot;no GOs to plot&quot; if(nrow(df_GO) &gt; 0){ barplot(df_GO, showCategory = showCategory, title = type_of_GO) } else &quot;no GOs to plot&quot; 5.3 KEGG 5.3.1 Prepare the the data # select gene_id in ENSEMBL format and DIFF from the result table DIFF &lt;- data_MAPP %&gt;% dplyr::select(gene_id, DIFF) # rename the gene_id column names(DIFF)[1] &lt;- &quot;ENSEMBL&quot; # preview the head of the table head(DIFF) # create new df by converting ENSEMBL ID into ENTREZID and adding DIFF column # arrange table in descending order by abs(DIFF) genes_ENTREZ_df &lt;- bitr(na.omit(data_MAPP$gene_id[data_MAPP$padj &lt; genes_padj_cutoff]), fromType = &quot;ENSEMBL&quot;, toType = &quot;ENTREZID&quot;, OrgDb= organismDB) %&gt;% left_join(DIFF, by = &quot;ENSEMBL&quot;) %&gt;% arrange(desc(abs(DIFF))) ## &#39;select()&#39; returned 1:1 mapping between keys and columns # preview obtained table head(genes_ENTREZ_df ) # create a vector with DIFF values genes_DIFF &lt;- genes_ENTREZ_df$DIFF genes_DIFF ## [1] -0.7386234447 -0.7038045357 -0.6472437587 -0.6348159210 -0.6183222312 -0.6061716878 -0.5904575645 -0.5516013241 -0.5371580583 -0.5060305047 -0.4982807580 -0.4886914984 ## [13] -0.4807004864 0.4793950287 0.4432134641 -0.4269054383 -0.4170725114 -0.4125588465 0.4023150393 -0.4011637408 -0.4008816599 -0.4000936554 -0.3963373228 -0.3961706940 ## [25] -0.3846735935 0.3804743706 -0.3801249848 -0.3787195015 -0.3647345621 -0.3545908955 -0.3350696756 0.3161439703 -0.3128791385 -0.3123945288 -0.3089303409 -0.3011135743 ## [37] 0.2938941789 -0.2934065741 -0.2851575359 -0.2796040305 -0.2705194645 -0.2683871228 -0.2627351309 0.2564752438 -0.2521550892 0.2510039064 0.2499223522 -0.2456948766 ## [49] 0.2433980030 0.2408254676 -0.2389997061 -0.2248009201 -0.2227803174 -0.2153954570 -0.2027331300 -0.2008920065 0.1981858275 -0.1962084656 -0.1946907931 -0.1936560438 ## [61] 0.1904533776 -0.1876549753 0.1834421396 -0.1730988832 0.1717303192 -0.1689056386 -0.1676786698 -0.1654800446 0.1626484206 0.1561459358 0.1524532329 -0.1522085839 ## [73] -0.1467825838 -0.1454036449 -0.1453129239 -0.1405528325 -0.1345836652 0.1344607384 0.1337166473 -0.1294719137 -0.1234657988 -0.1234367491 0.1228017521 0.1224734400 ## [85] -0.1191688457 -0.1150050172 -0.1136706999 -0.1133982194 0.1095649637 -0.1092203820 -0.1090249174 0.1081349218 -0.1078565684 0.1021686602 -0.1021405510 -0.1017850335 ## [97] -0.1011212729 -0.1008642737 0.0955166707 -0.0884373350 -0.0863868276 -0.0824228653 -0.0812306197 0.0755034384 -0.0730146511 -0.0715218434 -0.0678886226 -0.0674346764 ## [109] -0.0577699885 0.0507903936 -0.0501563469 -0.0462337926 -0.0461497350 0.0460694157 -0.0460118164 -0.0449491477 -0.0420112994 0.0414736525 0.0398431020 -0.0353065495 ## [121] 0.0312025862 0.0284050762 -0.0282860442 -0.0276688124 -0.0205277813 -0.0189964783 -0.0170156134 -0.0148074982 0.0147491869 -0.0144495156 -0.0108655726 -0.0100437933 ## [133] -0.0080699362 -0.0078104107 -0.0037217345 -0.0035988507 0.0034517318 -0.0013964374 0.0004537414 # add names based on ENTREZID names(genes_DIFF) &lt;- genes_ENTREZ_df$ENTREZID # preview genes in ENTREZ format with corresponding fold changes head(genes_DIFF) ## 6550 3897 10152 3897 10579 55619 ## -0.7386234 -0.7038045 -0.6472438 -0.6348159 -0.6183222 -0.6061717 5.3.2 run enrichKEGG # run enrichKEGG using options specified in &quot;index.Rmd&quot; file KEGGresults &lt;- enrichKEGG( names(genes_DIFF), organism = &quot;hsa&quot;, keyType = &quot;ncbi-geneid&quot;, pvalueCutoff = pvalueCutoff, pAdjustMethod = &quot;BH&quot;, universe = as.character(na.omit(ENTREZ_universe)), use_internal_data = FALSE ) ## --&gt; No gene can be mapped.... ## --&gt; Expected input gene ID: ## --&gt; return NULL... # if there are enriched KEGG pathways found in &quot;KEGGresults&quot; object, # create a table with the results filtered by specified p-adjusted threshold, # if no enriched terms were found, print &quot;no KEGG pathways were found&quot; if (!is.null(KEGGresults)) { if(nrow(KEGGresults@result %&gt;% filter(p.adjust &lt; pvalueCutoff)) &gt; 0){ DT::datatable(KEGGresults@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE))} } else &quot;no KEGG pathways were found&quot; ## [1] &quot;no KEGG pathways were found&quot; "],["go-and-kegg-rbfox1-targets-06.html", "Chapter 6 GO and KEGG: RBFOX1 targets 06 6.1 Load the data 6.2 Gene ontology (GO) 6.3 KEGG", " Chapter 6 GO and KEGG: RBFOX1 targets 06 6.1 Load the data # load table with targets (binding probability &gt; 0.6) data_MAPP &lt;- read.table(&quot;data/inclusion_tables/0.6/rbfox1_exclusive_targets.tsv&quot;, header = T) # select control and cancer columns CTRL &lt;- data_MAPP %&gt;% dplyr::select_if(., grepl(&quot;^CONTROL_&quot;, names(.))) CANCER &lt;- data_MAPP %&gt;% dplyr::select_if(., grepl(&quot;^CANCER_&quot;, names(.))) # use row_t_welch instead of usual t.test function since t.test produces # errors in some cases: t.test error: data are essentially constant # NAs are assigned for problematic cases # https://stats.stackexchange.com/questions/499634/t-test-error-data-are-essentially-constant/499637 # library matrixTests data_MAPP &lt;- data_MAPP %&gt;% mutate(padj = p.adjust(row_t_welch(CTRL, CANCER)$pvalue, method = &quot;BH&quot;, n=nrow(data_MAPP))) ## Warning: There was 1 warning in `mutate()`. ## â„¹ In argument: `padj = p.adjust(row_t_welch(CTRL, CANCER)$pvalue, method = &quot;BH&quot;, n = nrow(data_MAPP))`. ## Caused by warning: ## ! row_t_welch: 25 of the rows had essentially constant values. ## First occurrence at row 11 # view table interactively DT::datatable(data_MAPP, options = list(scrollX = TRUE)) 6.2 Gene ontology (GO) 6.2.1 Prepare the gene list # select genes from data_MAPP table based on padj values # threshold is set in index.Rmd: genes_padj_cutoff genes &lt;- na.omit(data_MAPP) %&gt;% arrange(desc(ABSDIFF)) %&gt;% filter(padj &lt; genes_padj_cutoff) %&gt;% dplyr::select(gene_id) %&gt;% unlist() genes &lt;- unlist(strsplit(genes, &quot;,&quot;)) # preview the gene names head(genes) ## gene_id1 gene_id2 gene_id3 gene_id4 gene_id5 gene_id6 ## &quot;ENSG00000128739&quot; &quot;ENSG00000162623&quot; &quot;ENSG00000136153&quot; &quot;ENSG00000151746&quot; &quot;ENSG00000124831&quot; &quot;ENSG00000151276&quot; 6.2.2 Biological process (BP) # select type of GO analysis type_of_GO = &quot;BP&quot; # create an object with a name based on the type of analysis assign(paste0(&quot;GO_&quot;, type_of_GO), enrichGO( genes, organismDB, keyType = &quot;ENSEMBL&quot;, ont = type_of_GO, pvalueCutoff = pvalueCutoff, minGSSize = minGSSize, pAdjustMethod = &quot;BH&quot;, universe = universe, readable = TRUE)) # assign the object created above to &quot;df_GO&quot; object df_GO &lt;- eval(parse(text = paste0(&quot;GO_&quot;, type_of_GO))) # if there are enriched terms in &quot;df_GO&quot; object, create a table with the results # filtered by specified p-adjusted threshold, if no enriched terms were found # print &quot;no GOs were found&quot; if(nrow(df_GO) &gt; 0){ DT::datatable(df_GO@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE)) } else &quot;no GOs were found&quot; ## [1] &quot;no GOs were found&quot; # if there are enriched terms in &quot;df_GO&quot; object, create a barplot with # specified number of GOs to plot, if no enriched terms were found # print &quot;no GOs to plot&quot; if(nrow(df_GO) &gt; 0){ barplot(df_GO, showCategory = showCategory, title = type_of_GO) } else &quot;no GOs to plot&quot; ## [1] &quot;no GOs to plot&quot; 6.2.3 Molecular function (MF) # select type of GO analysis type_of_GO = &quot;MF&quot; # create an object with a name based on the type of analysis assign(paste0(&quot;GO_&quot;, type_of_GO), enrichGO( genes, organismDB, keyType = &quot;ENSEMBL&quot;, ont = type_of_GO, pvalueCutoff = pvalueCutoff, minGSSize = minGSSize, pAdjustMethod = &quot;BH&quot;, universe = universe, readable = TRUE)) # assign the object created above to &quot;df_GO&quot; object df_GO &lt;- eval(parse(text = paste0(&quot;GO_&quot;, type_of_GO))) # if there are enriched terms in &quot;df_GO&quot; object, create a table with the results # filtered by specified p-adjusted threshold, if no enriched terms were found # print &quot;no GOs were found&quot; if(nrow(df_GO) &gt; 0){ DT::datatable(df_GO@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE)) } else &quot;no GOs were found&quot; ## [1] &quot;no GOs were found&quot; # if there are enriched terms in &quot;df_GO&quot; object, create a barplot with # specified number of GOs to plot, if no enriched terms were found # print &quot;no GOs to plot&quot; if(nrow(df_GO) &gt; 0){ barplot(df_GO, showCategory = showCategory, title = type_of_GO) } else &quot;no GOs to plot&quot; ## [1] &quot;no GOs to plot&quot; 6.2.4 Cellular component (CC) # select type of GO analysis type_of_GO = &quot;CC&quot; # create an object with a name based on the type of analysis assign(paste0(&quot;GO_&quot;, type_of_GO), enrichGO( genes, organismDB, keyType = &quot;ENSEMBL&quot;, ont = type_of_GO, pvalueCutoff = pvalueCutoff, minGSSize = minGSSize, pAdjustMethod = &quot;BH&quot;, universe = universe, readable = TRUE)) # assign the object created above to &quot;df_GO&quot; object df_GO &lt;- eval(parse(text = paste0(&quot;GO_&quot;, type_of_GO))) # if there are enriched terms in &quot;df_GO&quot; object, create a table with the results # filtered by specified p-adjusted threshold, if no enriched terms were found # print &quot;no GOs were found&quot; if(nrow(df_GO) &gt; 0){ DT::datatable(df_GO@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE)) } else &quot;no GOs were found&quot; ## [1] &quot;no GOs were found&quot; # if there are enriched terms in &quot;df_GO&quot; object, create a barplot with # specified number of GOs to plot, if no enriched terms were found # print &quot;no GOs to plot&quot; if(nrow(df_GO) &gt; 0){ barplot(df_GO, showCategory = showCategory, title = type_of_GO) } else &quot;no GOs to plot&quot; ## [1] &quot;no GOs to plot&quot; 6.3 KEGG 6.3.1 Prepare the the data # select gene_id in ENSEMBL format and DIFF from the result table DIFF &lt;- data_MAPP %&gt;% dplyr::select(gene_id, DIFF) # rename the gene_id column names(DIFF)[1] &lt;- &quot;ENSEMBL&quot; # preview the head of the table head(DIFF) # create new df by converting ENSEMBL ID into ENTREZID and adding DIFF column # arrange table in descending order by abs(DIFF) genes_ENTREZ_df &lt;- bitr(na.omit(data_MAPP$gene_id[data_MAPP$padj &lt; genes_padj_cutoff]), fromType = &quot;ENSEMBL&quot;, toType = &quot;ENTREZID&quot;, OrgDb= organismDB) %&gt;% left_join(DIFF, by = &quot;ENSEMBL&quot;) %&gt;% arrange(desc(abs(DIFF))) ## &#39;select()&#39; returned 1:1 mapping between keys and columns # preview obtained table head(genes_ENTREZ_df ) # create a vector with DIFF values genes_DIFF &lt;- genes_ENTREZ_df$DIFF genes_DIFF ## [1] 0.690837237 0.577310225 0.401096728 0.382944514 -0.361995945 -0.260050537 0.242900110 0.237877425 -0.237621079 -0.220808352 -0.209041756 -0.207505831 -0.199712508 ## [14] 0.176254170 0.170387727 -0.167819973 -0.157890447 0.150591208 0.148730810 -0.144259748 0.144017973 0.137094818 0.091228837 0.058470376 -0.035038742 -0.032856829 ## [27] -0.003924551 0.000000000 # add names based on ENTREZID names(genes_DIFF) &lt;- genes_ENTREZ_df$ENTREZID # preview genes in ENTREZ format with corresponding fold changes head(genes_DIFF) ## 6638 127253 4008 636 9208 9223 ## 0.6908372 0.5773102 0.4010967 0.3829445 -0.3619959 -0.2600505 6.3.2 run enrichKEGG # run enrichKEGG using options specified in &quot;index.Rmd&quot; file KEGGresults &lt;- enrichKEGG( names(genes_DIFF), organism = &quot;hsa&quot;, keyType = &quot;ncbi-geneid&quot;, pvalueCutoff = pvalueCutoff, pAdjustMethod = &quot;BH&quot;, universe = as.character(na.omit(ENTREZ_universe)), use_internal_data = FALSE ) ## --&gt; No gene can be mapped.... ## --&gt; Expected input gene ID: ## --&gt; return NULL... # if there are enriched KEGG pathways found in &quot;KEGGresults&quot; object, # create a table with the results filtered by specified p-adjusted threshold, # if no enriched terms were found, print &quot;no KEGG pathways were found&quot; if (!is.null(KEGGresults)) { if(nrow(KEGGresults@result %&gt;% filter(p.adjust &lt; pvalueCutoff)) &gt; 0){ DT::datatable(KEGGresults@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE))} } else &quot;no KEGG pathways were found&quot; ## [1] &quot;no KEGG pathways were found&quot; "],["go-and-kegg-rbfox1-targets-09.html", "Chapter 7 GO and KEGG: RBFOX1 targets 09 7.1 Load the data 7.2 Gene ontology (GO) 7.3 KEGG", " Chapter 7 GO and KEGG: RBFOX1 targets 09 7.1 Load the data # load table with targets (binding probability &gt; 0.9) data_MAPP &lt;- read.table(&quot;data/inclusion_tables/0.9/rbfox1_exclusive_targets.tsv&quot;, header = T) # select control and cancer columns CTRL &lt;- data_MAPP %&gt;% dplyr::select_if(., grepl(&quot;^CONTROL_&quot;, names(.))) CANCER &lt;- data_MAPP %&gt;% dplyr::select_if(., grepl(&quot;^CANCER_&quot;, names(.))) # use row_t_welch instead of usual t.test function since t.test produces # errors in some cases: t.test error: data are essentially constant # NAs are assigned for problematic cases # https://stats.stackexchange.com/questions/499634/t-test-error-data-are-essentially-constant/499637 # library matrixTests data_MAPP &lt;- data_MAPP %&gt;% mutate(padj = p.adjust(row_t_welch(CTRL, CANCER)$pvalue, method = &quot;BH&quot;, n=nrow(data_MAPP))) ## Warning: There was 1 warning in `mutate()`. ## â„¹ In argument: `padj = p.adjust(row_t_welch(CTRL, CANCER)$pvalue, method = &quot;BH&quot;, n = nrow(data_MAPP))`. ## Caused by warning: ## ! row_t_welch: 22 of the rows had essentially constant values. ## First occurrence at row 8 # view table interactively DT::datatable(data_MAPP, options = list(scrollX = TRUE)) 7.2 Gene ontology (GO) 7.2.1 Prepare the gene list # select genes from data_MAPP table based on padj values # threshold is set in index.Rmd: genes_padj_cutoff genes &lt;- na.omit(data_MAPP) %&gt;% arrange(desc(ABSDIFF)) %&gt;% filter(padj &lt; genes_padj_cutoff) %&gt;% dplyr::select(gene_id) %&gt;% unlist() genes &lt;- unlist(strsplit(genes, &quot;,&quot;)) # preview the gene names head(genes) ## gene_id1 gene_id2 gene_id3 gene_id4 gene_id5 gene_id6 ## &quot;ENSG00000128739&quot; &quot;ENSG00000162623&quot; &quot;ENSG00000151746&quot; &quot;ENSG00000124831&quot; &quot;ENSG00000151276&quot; &quot;ENSG00000083168&quot; 7.2.2 Biological process (BP) # select type of GO analysis type_of_GO = &quot;BP&quot; # create an object with a name based on the type of analysis assign(paste0(&quot;GO_&quot;, type_of_GO), enrichGO( genes, organismDB, keyType = &quot;ENSEMBL&quot;, ont = type_of_GO, pvalueCutoff = pvalueCutoff, minGSSize = minGSSize, pAdjustMethod = &quot;BH&quot;, universe = universe, readable = TRUE)) # assign the object created above to &quot;df_GO&quot; object df_GO &lt;- eval(parse(text = paste0(&quot;GO_&quot;, type_of_GO))) # if there are enriched terms in &quot;df_GO&quot; object, create a table with the results # filtered by specified p-adjusted threshold, if no enriched terms were found # print &quot;no GOs were found&quot; if(nrow(df_GO) &gt; 0){ DT::datatable(df_GO@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE)) } else &quot;no GOs were found&quot; ## [1] &quot;no GOs were found&quot; # if there are enriched terms in &quot;df_GO&quot; object, create a barplot with # specified number of GOs to plot, if no enriched terms were found # print &quot;no GOs to plot&quot; if(nrow(df_GO) &gt; 0){ barplot(df_GO, showCategory = showCategory, title = type_of_GO) } else &quot;no GOs to plot&quot; ## [1] &quot;no GOs to plot&quot; 7.2.3 Molecular function (MF) # select type of GO analysis type_of_GO = &quot;MF&quot; # create an object with a name based on the type of analysis assign(paste0(&quot;GO_&quot;, type_of_GO), enrichGO( genes, organismDB, keyType = &quot;ENSEMBL&quot;, ont = type_of_GO, pvalueCutoff = pvalueCutoff, minGSSize = minGSSize, pAdjustMethod = &quot;BH&quot;, universe = universe, readable = TRUE)) # assign the object created above to &quot;df_GO&quot; object df_GO &lt;- eval(parse(text = paste0(&quot;GO_&quot;, type_of_GO))) # if there are enriched terms in &quot;df_GO&quot; object, create a table with the results # filtered by specified p-adjusted threshold, if no enriched terms were found # print &quot;no GOs were found&quot; if(nrow(df_GO) &gt; 0){ DT::datatable(df_GO@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE)) } else &quot;no GOs were found&quot; ## [1] &quot;no GOs were found&quot; # if there are enriched terms in &quot;df_GO&quot; object, create a barplot with # specified number of GOs to plot, if no enriched terms were found # print &quot;no GOs to plot&quot; if(nrow(df_GO) &gt; 0){ barplot(df_GO, showCategory = showCategory, title = type_of_GO) } else &quot;no GOs to plot&quot; ## [1] &quot;no GOs to plot&quot; 7.2.4 Cellular component (CC) # select type of GO analysis type_of_GO = &quot;CC&quot; # create an object with a name based on the type of analysis assign(paste0(&quot;GO_&quot;, type_of_GO), enrichGO( genes, organismDB, keyType = &quot;ENSEMBL&quot;, ont = type_of_GO, pvalueCutoff = pvalueCutoff, minGSSize = minGSSize, pAdjustMethod = &quot;BH&quot;, universe = universe, readable = TRUE)) # assign the object created above to &quot;df_GO&quot; object df_GO &lt;- eval(parse(text = paste0(&quot;GO_&quot;, type_of_GO))) # if there are enriched terms in &quot;df_GO&quot; object, create a table with the results # filtered by specified p-adjusted threshold, if no enriched terms were found # print &quot;no GOs were found&quot; if(nrow(df_GO) &gt; 0){ DT::datatable(df_GO@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE)) } else &quot;no GOs were found&quot; ## [1] &quot;no GOs were found&quot; # if there are enriched terms in &quot;df_GO&quot; object, create a barplot with # specified number of GOs to plot, if no enriched terms were found # print &quot;no GOs to plot&quot; if(nrow(df_GO) &gt; 0){ barplot(df_GO, showCategory = showCategory, title = type_of_GO) } else &quot;no GOs to plot&quot; ## [1] &quot;no GOs to plot&quot; 7.3 KEGG 7.3.1 Prepare the the data # select gene_id in ENSEMBL format and DIFF from the result table DIFF &lt;- data_MAPP %&gt;% dplyr::select(gene_id, DIFF) # rename the gene_id column names(DIFF)[1] &lt;- &quot;ENSEMBL&quot; # preview the head of the table head(DIFF) # create new df by converting ENSEMBL ID into ENTREZID and adding DIFF column # arrange table in descending order by abs(DIFF) genes_ENTREZ_df &lt;- bitr(na.omit(data_MAPP$gene_id[data_MAPP$padj &lt; genes_padj_cutoff]), fromType = &quot;ENSEMBL&quot;, toType = &quot;ENTREZID&quot;, OrgDb= organismDB) %&gt;% left_join(DIFF, by = &quot;ENSEMBL&quot;) %&gt;% arrange(desc(abs(DIFF))) ## &#39;select()&#39; returned 1:1 mapping between keys and columns # preview obtained table head(genes_ENTREZ_df ) # create a vector with DIFF values genes_DIFF &lt;- genes_ENTREZ_df$DIFF genes_DIFF ## [1] 0.690837237 0.577310225 0.382944514 -0.361995945 -0.260050537 0.242900110 0.237877425 -0.237621079 -0.220808352 -0.213133251 -0.209041756 -0.207505831 -0.199712508 ## [14] 0.170387727 -0.167819973 -0.157890447 0.150591208 0.148730810 -0.144259748 0.144017973 0.137094818 0.091228837 0.068864462 0.058470376 -0.035038742 -0.032856829 ## [27] -0.003924551 0.000000000 # add names based on ENTREZID names(genes_DIFF) &lt;- genes_ENTREZ_df$ENTREZID # preview genes in ENTREZ format with corresponding fold changes head(genes_DIFF) ## 6638 127253 636 9208 9223 7994 ## 0.6908372 0.5773102 0.3829445 -0.3619959 -0.2600505 0.2429001 7.3.2 run enrichKEGG # run enrichKEGG using options specified in &quot;index.Rmd&quot; file KEGGresults &lt;- enrichKEGG( names(genes_DIFF), organism = &quot;hsa&quot;, keyType = &quot;ncbi-geneid&quot;, pvalueCutoff = pvalueCutoff, pAdjustMethod = &quot;BH&quot;, universe = as.character(na.omit(ENTREZ_universe)), use_internal_data = FALSE ) ## --&gt; No gene can be mapped.... ## --&gt; Expected input gene ID: ## --&gt; return NULL... # if there are enriched KEGG pathways found in &quot;KEGGresults&quot; object, # create a table with the results filtered by specified p-adjusted threshold, # if no enriched terms were found, print &quot;no KEGG pathways were found&quot; if (!is.null(KEGGresults)) { if(nrow(KEGGresults@result %&gt;% filter(p.adjust &lt; pvalueCutoff)) &gt; 0){ DT::datatable(KEGGresults@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE))} } else &quot;no KEGG pathways were found&quot; ## [1] &quot;no KEGG pathways were found&quot; "],["go-and-kegg-non-targets-06.html", "Chapter 8 GO and KEGG: non targets 06 8.1 Load the data 8.2 Gene ontology (GO) 8.3 KEGG", " Chapter 8 GO and KEGG: non targets 06 8.1 Load the data # load table with non_targets (binding probability &gt; 0.6) data_MAPP &lt;- read.table(&quot;data/inclusion_tables/0.6/non_targets.tsv&quot;, header = T) # select control and cancer columns CTRL &lt;- data_MAPP %&gt;% dplyr::select_if(., grepl(&quot;^CONTROL_&quot;, names(.))) CANCER &lt;- data_MAPP %&gt;% dplyr::select_if(., grepl(&quot;^CANCER_&quot;, names(.))) # use row_t_welch instead of usual t.test function since t.test produces # errors in some cases: t.test error: data are essentially constant # NAs are assigned for problematic cases # https://stats.stackexchange.com/questions/499634/t-test-error-data-are-essentially-constant/499637 # library matrixTests data_MAPP &lt;- data_MAPP %&gt;% mutate(padj = p.adjust(row_t_welch(CTRL, CANCER)$pvalue, method = &quot;BH&quot;, n=nrow(data_MAPP))) ## Warning: There was 1 warning in `mutate()`. ## â„¹ In argument: `padj = p.adjust(row_t_welch(CTRL, CANCER)$pvalue, method = &quot;BH&quot;, n = nrow(data_MAPP))`. ## Caused by warning: ## ! row_t_welch: 107 of the rows had essentially constant values. ## First occurrence at row 1 # view table interactively DT::datatable(data_MAPP, options = list(scrollX = TRUE)) 8.2 Gene ontology (GO) 8.2.1 Prepare the gene list # select genes from data_MAPP table based on padj values # threshold is set in index.Rmd: genes_padj_cutoff genes &lt;- na.omit(data_MAPP) %&gt;% arrange(desc(ABSDIFF)) %&gt;% filter(padj &lt; genes_padj_cutoff) %&gt;% dplyr::select(gene_id) %&gt;% unlist() genes &lt;- unlist(strsplit(genes, &quot;,&quot;)) # preview the gene names head(genes) ## gene_id1 gene_id2 gene_id3 gene_id4 gene_id51 gene_id52 ## &quot;ENSG00000196776&quot; &quot;ENSG00000104093&quot; &quot;ENSG00000102271&quot; &quot;ENSG00000214827&quot; &quot;ENSG00000166803&quot; &quot;ENSG00000259316&quot; 8.2.2 Biological process (BP) # select type of GO analysis type_of_GO = &quot;BP&quot; # create an object with a name based on the type of analysis assign(paste0(&quot;GO_&quot;, type_of_GO), enrichGO( genes, organismDB, keyType = &quot;ENSEMBL&quot;, ont = type_of_GO, pvalueCutoff = pvalueCutoff, minGSSize = minGSSize, pAdjustMethod = &quot;BH&quot;, universe = universe, readable = TRUE)) # assign the object created above to &quot;df_GO&quot; object df_GO &lt;- eval(parse(text = paste0(&quot;GO_&quot;, type_of_GO))) # if there are enriched terms in &quot;df_GO&quot; object, create a table with the results # filtered by specified p-adjusted threshold, if no enriched terms were found # print &quot;no GOs were found&quot; if(nrow(df_GO) &gt; 0){ DT::datatable(df_GO@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE)) } else &quot;no GOs were found&quot; ## [1] &quot;no GOs were found&quot; # if there are enriched terms in &quot;df_GO&quot; object, create a barplot with # specified number of GOs to plot, if no enriched terms were found # print &quot;no GOs to plot&quot; if(nrow(df_GO) &gt; 0){ barplot(df_GO, showCategory = showCategory, title = type_of_GO) } else &quot;no GOs to plot&quot; ## [1] &quot;no GOs to plot&quot; 8.2.3 Molecular function (MF) # select type of GO analysis type_of_GO = &quot;MF&quot; # create an object with a name based on the type of analysis assign(paste0(&quot;GO_&quot;, type_of_GO), enrichGO( genes, organismDB, keyType = &quot;ENSEMBL&quot;, ont = type_of_GO, pvalueCutoff = pvalueCutoff, minGSSize = minGSSize, pAdjustMethod = &quot;BH&quot;, universe = universe, readable = TRUE)) # assign the object created above to &quot;df_GO&quot; object df_GO &lt;- eval(parse(text = paste0(&quot;GO_&quot;, type_of_GO))) # if there are enriched terms in &quot;df_GO&quot; object, create a table with the results # filtered by specified p-adjusted threshold, if no enriched terms were found # print &quot;no GOs were found&quot; if(nrow(df_GO) &gt; 0){ DT::datatable(df_GO@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE)) } else &quot;no GOs were found&quot; ## [1] &quot;no GOs were found&quot; # if there are enriched terms in &quot;df_GO&quot; object, create a barplot with # specified number of GOs to plot, if no enriched terms were found # print &quot;no GOs to plot&quot; if(nrow(df_GO) &gt; 0){ barplot(df_GO, showCategory = showCategory, title = type_of_GO) } else &quot;no GOs to plot&quot; ## [1] &quot;no GOs to plot&quot; 8.2.4 Cellular component (CC) # select type of GO analysis type_of_GO = &quot;CC&quot; # create an object with a name based on the type of analysis assign(paste0(&quot;GO_&quot;, type_of_GO), enrichGO( genes, organismDB, keyType = &quot;ENSEMBL&quot;, ont = type_of_GO, pvalueCutoff = pvalueCutoff, minGSSize = minGSSize, pAdjustMethod = &quot;BH&quot;, universe = universe, readable = TRUE)) # assign the object created above to &quot;df_GO&quot; object df_GO &lt;- eval(parse(text = paste0(&quot;GO_&quot;, type_of_GO))) # if there are enriched terms in &quot;df_GO&quot; object, create a table with the results # filtered by specified p-adjusted threshold, if no enriched terms were found # print &quot;no GOs were found&quot; if(nrow(df_GO) &gt; 0){ DT::datatable(df_GO@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE)) } else &quot;no GOs were found&quot; ## [1] &quot;no GOs were found&quot; # if there are enriched terms in &quot;df_GO&quot; object, create a barplot with # specified number of GOs to plot, if no enriched terms were found # print &quot;no GOs to plot&quot; if(nrow(df_GO) &gt; 0){ barplot(df_GO, showCategory = showCategory, title = type_of_GO) } else &quot;no GOs to plot&quot; ## [1] &quot;no GOs to plot&quot; 8.3 KEGG 8.3.1 Prepare the the data # select gene_id in ENSEMBL format and DIFF from the result table DIFF &lt;- data_MAPP %&gt;% dplyr::select(gene_id, DIFF) # rename the gene_id column names(DIFF)[1] &lt;- &quot;ENSEMBL&quot; # preview the head of the table head(DIFF) # create new df by converting ENSEMBL ID into ENTREZID and adding DIFF column # arrange table in descending order by abs(DIFF) genes_ENTREZ_df &lt;- bitr(na.omit(data_MAPP$gene_id[data_MAPP$padj &lt; genes_padj_cutoff]), fromType = &quot;ENSEMBL&quot;, toType = &quot;ENTREZID&quot;, OrgDb= organismDB) %&gt;% left_join(DIFF, by = &quot;ENSEMBL&quot;) %&gt;% arrange(desc(abs(DIFF))) ## &#39;select()&#39; returned 1:many mapping between keys and columns # preview obtained table head(genes_ENTREZ_df ) # create a vector with DIFF values genes_DIFF &lt;- genes_ENTREZ_df$DIFF genes_DIFF ## [1] -0.866506924 0.718935136 -0.659072802 -0.621576133 -0.528670934 0.510542059 -0.418313583 0.402566080 0.383206663 -0.372208614 -0.352828023 -0.343327475 -0.328634971 ## [14] -0.325454472 0.316591691 0.316401061 -0.309703567 -0.300101926 0.298972554 0.291218771 0.289326326 0.285919541 -0.276265372 -0.273459403 0.249998857 0.249998857 ## [27] 0.241861817 -0.237145356 -0.234615217 -0.226314398 0.220021682 0.219873591 0.218977682 -0.216836466 -0.216015887 0.215664424 -0.215192674 -0.201077250 -0.198543716 ## [40] -0.198004302 -0.193468626 -0.192606895 0.187960427 -0.178571654 -0.174016829 0.170521309 -0.167857431 0.158662091 0.155321273 -0.154157988 0.153179153 -0.150818161 ## [53] -0.142754980 0.137698349 -0.114531338 0.110782731 0.110103762 0.109984803 0.107074005 -0.099228726 -0.096491295 -0.095693324 -0.093992975 0.091762087 -0.089539766 ## [66] 0.084344634 0.083180580 0.081116714 -0.069154759 -0.062479275 -0.062207711 0.058660015 -0.052500897 0.051637080 0.049500900 0.047042407 -0.043444025 -0.043248934 ## [79] 0.038903354 0.037193892 0.034200950 0.033279535 -0.031260604 0.029926820 -0.027969573 0.026843593 0.023857447 0.016108454 0.012890170 -0.012334276 -0.010469745 ## [92] -0.008625834 0.008382196 0.007682573 -0.004842802 -0.004121580 0.000000000 0.000000000 # add names based on ENTREZID names(genes_DIFF) &lt;- genes_ENTREZ_df$ENTREZID # preview genes in ENTREZ format with corresponding fold changes head(genes_DIFF) ## 961 23312 56062 4515 259266 79980 ## -0.8665069 0.7189351 -0.6590728 -0.6215761 -0.5286709 0.5105421 8.3.2 run enrichKEGG # run enrichKEGG using options specified in &quot;index.Rmd&quot; file KEGGresults &lt;- enrichKEGG( names(genes_DIFF), organism = &quot;hsa&quot;, keyType = &quot;ncbi-geneid&quot;, pvalueCutoff = pvalueCutoff, pAdjustMethod = &quot;BH&quot;, universe = as.character(na.omit(ENTREZ_universe)), use_internal_data = FALSE ) ## --&gt; No gene can be mapped.... ## --&gt; Expected input gene ID: ## --&gt; return NULL... # if there are enriched KEGG pathways found in &quot;KEGGresults&quot; object, # create a table with the results filtered by specified p-adjusted threshold, # if no enriched terms were found, print &quot;no KEGG pathways were found&quot; if (!is.null(KEGGresults)) { if(nrow(KEGGresults@result %&gt;% filter(p.adjust &lt; pvalueCutoff)) &gt; 0){ DT::datatable(KEGGresults@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE))} } else &quot;no KEGG pathways were found&quot; ## [1] &quot;no KEGG pathways were found&quot; "],["go-and-kegg-non-targets-09.html", "Chapter 9 GO and KEGG: non targets 09 9.1 Load the data 9.2 Gene ontology (GO) 9.3 KEGG", " Chapter 9 GO and KEGG: non targets 09 9.1 Load the data # load table with non_targets (binding probability &gt; 0.9) data_MAPP &lt;- read.table(&quot;data/inclusion_tables/0.9/non_targets.tsv&quot;, header = T) # select control and cancer columns CTRL &lt;- data_MAPP %&gt;% dplyr::select_if(., grepl(&quot;^CONTROL_&quot;, names(.))) CANCER &lt;- data_MAPP %&gt;% dplyr::select_if(., grepl(&quot;^CANCER_&quot;, names(.))) # use row_t_welch instead of usual t.test function since t.test produces # errors in some cases: t.test error: data are essentially constant # NAs are assigned for problematic cases # https://stats.stackexchange.com/questions/499634/t-test-error-data-are-essentially-constant/499637 # library matrixTests data_MAPP &lt;- data_MAPP %&gt;% mutate(padj = p.adjust(row_t_welch(CTRL, CANCER)$pvalue, method = &quot;BH&quot;, n=nrow(data_MAPP))) ## Warning: There was 1 warning in `mutate()`. ## â„¹ In argument: `padj = p.adjust(row_t_welch(CTRL, CANCER)$pvalue, method = &quot;BH&quot;, n = nrow(data_MAPP))`. ## Caused by warning: ## ! row_t_welch: 107 of the rows had essentially constant values. ## First occurrence at row 1 # view table interactively DT::datatable(data_MAPP, options = list(scrollX = TRUE)) 9.2 Gene ontology (GO) 9.2.1 Prepare the gene list # select genes from data_MAPP table based on padj values # threshold is set in index.Rmd: genes_padj_cutoff genes &lt;- na.omit(data_MAPP) %&gt;% arrange(desc(ABSDIFF)) %&gt;% filter(padj &lt; genes_padj_cutoff) %&gt;% dplyr::select(gene_id) %&gt;% unlist() genes &lt;- unlist(strsplit(genes, &quot;,&quot;)) # preview the gene names head(genes) ## gene_id1 gene_id2 gene_id3 gene_id4 gene_id51 gene_id52 ## &quot;ENSG00000196776&quot; &quot;ENSG00000104093&quot; &quot;ENSG00000102271&quot; &quot;ENSG00000214827&quot; &quot;ENSG00000166803&quot; &quot;ENSG00000259316&quot; 9.2.2 Biological process (BP) # select type of GO analysis type_of_GO = &quot;BP&quot; # create an object with a name based on the type of analysis assign(paste0(&quot;GO_&quot;, type_of_GO), enrichGO( genes, organismDB, keyType = &quot;ENSEMBL&quot;, ont = type_of_GO, pvalueCutoff = pvalueCutoff, minGSSize = minGSSize, pAdjustMethod = &quot;BH&quot;, universe = universe, readable = TRUE)) # assign the object created above to &quot;df_GO&quot; object df_GO &lt;- eval(parse(text = paste0(&quot;GO_&quot;, type_of_GO))) # if there are enriched terms in &quot;df_GO&quot; object, create a table with the results # filtered by specified p-adjusted threshold, if no enriched terms were found # print &quot;no GOs were found&quot; if(nrow(df_GO) &gt; 0){ DT::datatable(df_GO@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE)) } else &quot;no GOs were found&quot; ## [1] &quot;no GOs were found&quot; # if there are enriched terms in &quot;df_GO&quot; object, create a barplot with # specified number of GOs to plot, if no enriched terms were found # print &quot;no GOs to plot&quot; if(nrow(df_GO) &gt; 0){ barplot(df_GO, showCategory = showCategory, title = type_of_GO) } else &quot;no GOs to plot&quot; ## [1] &quot;no GOs to plot&quot; 9.2.3 Molecular function (MF) # select type of GO analysis type_of_GO = &quot;MF&quot; # create an object with a name based on the type of analysis assign(paste0(&quot;GO_&quot;, type_of_GO), enrichGO( genes, organismDB, keyType = &quot;ENSEMBL&quot;, ont = type_of_GO, pvalueCutoff = pvalueCutoff, minGSSize = minGSSize, pAdjustMethod = &quot;BH&quot;, universe = universe, readable = TRUE)) # assign the object created above to &quot;df_GO&quot; object df_GO &lt;- eval(parse(text = paste0(&quot;GO_&quot;, type_of_GO))) # if there are enriched terms in &quot;df_GO&quot; object, create a table with the results # filtered by specified p-adjusted threshold, if no enriched terms were found # print &quot;no GOs were found&quot; if(nrow(df_GO) &gt; 0){ DT::datatable(df_GO@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE)) } else &quot;no GOs were found&quot; ## [1] &quot;no GOs were found&quot; # if there are enriched terms in &quot;df_GO&quot; object, create a barplot with # specified number of GOs to plot, if no enriched terms were found # print &quot;no GOs to plot&quot; if(nrow(df_GO) &gt; 0){ barplot(df_GO, showCategory = showCategory, title = type_of_GO) } else &quot;no GOs to plot&quot; ## [1] &quot;no GOs to plot&quot; 9.2.4 Cellular component (CC) # select type of GO analysis type_of_GO = &quot;CC&quot; # create an object with a name based on the type of analysis assign(paste0(&quot;GO_&quot;, type_of_GO), enrichGO( genes, organismDB, keyType = &quot;ENSEMBL&quot;, ont = type_of_GO, pvalueCutoff = pvalueCutoff, minGSSize = minGSSize, pAdjustMethod = &quot;BH&quot;, universe = universe, readable = TRUE)) # assign the object created above to &quot;df_GO&quot; object df_GO &lt;- eval(parse(text = paste0(&quot;GO_&quot;, type_of_GO))) # if there are enriched terms in &quot;df_GO&quot; object, create a table with the results # filtered by specified p-adjusted threshold, if no enriched terms were found # print &quot;no GOs were found&quot; if(nrow(df_GO) &gt; 0){ DT::datatable(df_GO@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE)) } else &quot;no GOs were found&quot; ## [1] &quot;no GOs were found&quot; # if there are enriched terms in &quot;df_GO&quot; object, create a barplot with # specified number of GOs to plot, if no enriched terms were found # print &quot;no GOs to plot&quot; if(nrow(df_GO) &gt; 0){ barplot(df_GO, showCategory = showCategory, title = type_of_GO) } else &quot;no GOs to plot&quot; ## [1] &quot;no GOs to plot&quot; 9.3 KEGG 9.3.1 Prepare the the data # select gene_id in ENSEMBL format and DIFF from the result table DIFF &lt;- data_MAPP %&gt;% dplyr::select(gene_id, DIFF) # rename the gene_id column names(DIFF)[1] &lt;- &quot;ENSEMBL&quot; # preview the head of the table head(DIFF) # create new df by converting ENSEMBL ID into ENTREZID and adding DIFF column # arrange table in descending order by abs(DIFF) genes_ENTREZ_df &lt;- bitr(na.omit(data_MAPP$gene_id[data_MAPP$padj &lt; genes_padj_cutoff]), fromType = &quot;ENSEMBL&quot;, toType = &quot;ENTREZID&quot;, OrgDb= organismDB) %&gt;% left_join(DIFF, by = &quot;ENSEMBL&quot;) %&gt;% arrange(desc(abs(DIFF))) ## &#39;select()&#39; returned 1:many mapping between keys and columns # preview obtained table head(genes_ENTREZ_df ) # create a vector with DIFF values genes_DIFF &lt;- genes_ENTREZ_df$DIFF genes_DIFF ## [1] -0.866506924 0.718935136 -0.659072802 -0.621576133 -0.528670934 0.510542059 -0.418313583 0.402566080 0.383206663 -0.372208614 -0.352828023 -0.343327475 -0.328634971 ## [14] -0.325454472 0.316591691 0.316401061 -0.309703567 -0.300101926 0.298972554 0.291218771 0.289326326 0.285919541 -0.276265372 -0.273459403 0.249998857 0.249998857 ## [27] 0.241861817 -0.237145356 -0.234615217 -0.226314398 0.220021682 0.219873591 0.218977682 -0.216836466 -0.216015887 0.215664424 -0.215192674 -0.201077250 -0.198543716 ## [40] -0.198004302 -0.193468626 -0.192606895 0.187960427 -0.178571654 -0.174016829 0.170521309 -0.167857431 0.158662091 0.155321273 -0.154157988 0.153179153 -0.150818161 ## [53] -0.142754980 0.137698349 -0.114531338 0.110782731 0.110103762 0.109984803 0.107074005 -0.099228726 -0.096491295 -0.095693324 -0.093992975 0.091762087 -0.089539766 ## [66] 0.084344634 0.083180580 0.081116714 -0.069154759 -0.062479275 -0.062207711 0.058660015 -0.052500897 0.051637080 0.049500900 0.047042407 -0.043444025 -0.043248934 ## [79] 0.038903354 0.037193892 0.034200950 0.033279535 -0.031260604 0.029926820 -0.027969573 0.026843593 0.023857447 0.016108454 0.012890170 -0.012334276 -0.010469745 ## [92] -0.008625834 0.008382196 0.007682573 -0.004842802 -0.004121580 0.000000000 0.000000000 # add names based on ENTREZID names(genes_DIFF) &lt;- genes_ENTREZ_df$ENTREZID # preview genes in ENTREZ format with corresponding fold changes head(genes_DIFF) ## 961 23312 56062 4515 259266 79980 ## -0.8665069 0.7189351 -0.6590728 -0.6215761 -0.5286709 0.5105421 9.3.2 run enrichKEGG # run enrichKEGG using options specified in &quot;index.Rmd&quot; file KEGGresults &lt;- enrichKEGG( names(genes_DIFF), organism = &quot;hsa&quot;, keyType = &quot;ncbi-geneid&quot;, pvalueCutoff = pvalueCutoff, pAdjustMethod = &quot;BH&quot;, universe = as.character(na.omit(ENTREZ_universe)), use_internal_data = FALSE ) ## --&gt; No gene can be mapped.... ## --&gt; Expected input gene ID: ## --&gt; return NULL... # if there are enriched KEGG pathways found in &quot;KEGGresults&quot; object, # create a table with the results filtered by specified p-adjusted threshold, # if no enriched terms were found, print &quot;no KEGG pathways were found&quot; if (!is.null(KEGGresults)) { if(nrow(KEGGresults@result %&gt;% filter(p.adjust &lt; pvalueCutoff)) &gt; 0){ DT::datatable(KEGGresults@result %&gt;% filter(p.adjust &lt; pvalueCutoff), options = list(scrollX = TRUE))} } else &quot;no KEGG pathways were found&quot; ## [1] &quot;no KEGG pathways were found&quot; "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
